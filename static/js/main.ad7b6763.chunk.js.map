{"version":3,"sources":["index.js"],"names":["App","DogImage","React","Component","props","variantArr","colorArr","handleClick","setState","loading","fetch","then","response","json","data","url","buttonColor","Math","floor","random","length","start","headerStyle","textAlign","color","marginTop","marginBottom","setLoadingFalse","state","fullyRendered","bind","this","className","animation","style","display","src","onLoad","onError","headerColor","renderImage","position","bottom","width","size","variant","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gQAOMA,G,mLAEF,OACM,kBAACC,EAAD,U,GAHQC,IAAMC,YAQlBF,E,kDAuBJ,WAAYG,GAAQ,IAAD,8BACjB,cAAMA,IAvBRC,WAAc,CACZ,UACA,YACA,UACA,UACA,SACA,OACA,QACA,OACA,QAaiB,EAXnBC,SAAW,CACT,QACA,MACA,QACA,OACA,YACA,SACA,SACA,QAGiB,EAoBnBC,YAAc,WACZ,EAAKC,SAAS,CAACC,SAAQ,IACvBC,MAAM,gCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKN,SAAS,CACZC,SAAS,EACTM,IAAKD,EAAKC,IACVC,YAAa,EAAKX,WAAWY,KAAKC,MAAMD,KAAKE,SAAW,EAAKd,WAAWe,SACxEC,OAAO,EACPC,YAAc,CACZC,UAAW,SACXC,MAAQ,EAAKlB,SAASW,KAAKC,MAAMD,KAAKE,SAAW,EAAKb,SAASc,SAC/DK,UAAW,OACXC,aAAc,cAlCL,EAwCnBC,gBAAkB,WAChB,EAAKnB,SAAS,CACVC,SAAS,KAxCb,EAAKmB,MAAQ,CACXC,eAAe,EACfpB,SAAS,EACTM,IAAK,GACLC,YAAa,UACbK,OAAO,EACPC,YAAa,CACXC,UAAW,SACXC,MAAO,QACPC,UAAW,OACXC,aAAc,SAIlB,EAAKnB,YAAc,EAAKA,YACvBuB,KADkB,gBAhBF,E,0DA8CL,IAAD,SACYC,KAAKH,MAArBb,EADI,EACJA,IACP,OAFW,EACCN,QAEZ,yBAAKuB,UAAY,WACf,kBAAC,IAAD,CAASC,UAAY,YAErB,yBAAKC,MAAOH,KAAKH,MAAMC,cAAgB,GAAK,CAACM,QAAS,QAASH,UAAY,QAAQI,IAAOrB,EAC1FsB,OAAU,kBAAM,EAAK7B,SAAS,CAACqB,eAAe,KAAQS,QAAWP,KAAKxB,gB,+BAI5DwB,KAAKQ,YAAjB,IADM,EAEoCR,KAAKH,MAAxCN,EAFD,EAECA,YAAaD,EAFd,EAEcA,MAAOL,EAFrB,EAEqBA,YAC3B,OACA,6BACE,6BACE,wBAAIkB,MAAOZ,GAAX,sBAEF,8BACID,GAASU,KAAKS,eAElB,yBAAKN,MACH,CACAO,SAAU,WACVC,OAAQ,OACRnB,UAAW,SACXoB,MAAO,SAGP,kBAAC,IAAD,CAASC,KAAO,KAAKC,QAAS7B,EAAa8B,QAAUf,KAAKxB,aAA1D,qBAAkG,U,GAlGnFL,IAAMC,WAyGvB4C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAACnD,EAAD,MAAS+C,I","file":"static/js/main.ad7b6763.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass App extends React.Component {\n  render(){\n    return (\n          <DogImage />\n    );\n  };\n}\n\nclass DogImage extends React.Component {\n  variantArr =  [\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"warning\",\n    \"danger\",\n    \"info\",\n    \"light\",\n    \"dark\",\n    \"link\"\n  ];\n  colorArr = [\n    'black',\n    'red',\n    'green',\n    'blue',\n    'lightblue',\n    'orange',\n    'purple',\n    'gold'\n  ]\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullyRendered: false,\n      loading: false,\n      url: \"\",\n      buttonColor: \"primary\",\n      start: true,\n      headerStyle: {\n        textAlign: 'center',\n        color: 'black',\n        marginTop: '30px',\n        marginBottom: '60px'\n      }\n    }\n\n    this.handleClick = this.handleClick\n    .bind(this);\n  }\n\n  handleClick = () => {\n    this.setState({loading:true});\n    fetch(\"https://random.dog/woof.json\")\n    .then(response => response.json())\n    .then(data => {\n        this.setState({\n          loading: false,\n          url: data.url,\n          buttonColor: this.variantArr[Math.floor(Math.random() * this.variantArr.length)],\n          start: false,\n          headerStyle : {\n            textAlign: 'center',\n            color : this.colorArr[Math.floor(Math.random() * this.colorArr.length)],\n            marginTop: '30px',\n            marginBottom: '60px'\n          },\n        });\n      });\n  }\n\n  setLoadingFalse = () => {\n    this.setState({\n        loading: false,\n    });\n  }\n\n  renderImage(){\n    const {url, loading} = this.state;\n    return loading ? \n    <div className = \"spinner\">\n      <Spinner animation = \"border\"/>\n    </div>\n    : <img style={this.state.fullyRendered ? {} : {display: 'none'}} className = \"photo\" src = {url} \n      onLoad = {() => this.setState({fullyRendered: true})} onError = {this.handleClick}/>;  \n  }\n\n  render(){\n    let color = this.headerColor;\n    const {headerStyle, start, buttonColor} = this.state;\n    return (\n    <div>\n      <div>\n        <h1 style={headerStyle}>Random Dog Finder</h1>\n      </div>\n      <div>\n        {!start && this.renderImage()}\n      </div>\n      <div style={ \n        {\n        position: 'absolute',\n        bottom: '30px',\n        textAlign: 'center',\n        width: '100%'\n        }\n        }>\n        <Button  size = \"lg\" variant={buttonColor} onClick= {this.handleClick}> FIND RANDOM DOG </Button>{' '}\n      </div>\n    </div>\n    )\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n  "],"sourceRoot":""}